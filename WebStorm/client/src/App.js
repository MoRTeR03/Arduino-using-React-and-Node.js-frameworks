import { useEffect, useState } from 'react';

function App() {
    const [socket, setSocket] = useState(null);
    const [inputCommand, setInputCommand] = useState('');
    const [lastUpdate, setLastUpdate] = useState(null);
    const [connected, setConnected] = useState(false); // ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
    const [sensorData, setSensorData] = useState({
        temperature: "-", humidity: "-", pressure: "-",
        light: "-", sound: "-", co: "-"
    });

    useEffect(() => {
        const ws = new WebSocket('ws://localhost:3000');

        ws.onopen = () => {
            console.log('Connected to server');
            setConnected(true); // ‚úÖ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ
        };

        ws.onclose = () => {
            console.log('Disconnected from server');
            setConnected(false);
            setLastUpdate(null);
        };

        ws.onmessage = (message) => {
            try {
                console.log("WS data:", message.data);
                const data = JSON.parse(message.data);
                if (data.type === "sensor" || data.temperature) {
                    const incoming = data.payload || data;
                    setSensorData(prev => {
                        const updated = { ...prev };
                        for (const key in incoming) {
                            if (
                                incoming[key] !== undefined &&
                                incoming[key] !== null &&
                                !Number.isNaN(incoming[key])
                            ) {
                                updated[key] = incoming[key];
                            }
                        }
                        return updated;
                    });
                    setLastUpdate(new Date().toLocaleTimeString());
                }
            } catch (e) {
                console.error('Invalid sensor data:', message.data);
            }
        };

        setSocket(ws);

        return () => ws.close();
    }, []);

    const sendCommand = (command) => {
        if (socket) socket.send(command);
    };

    const handleSendCustom = () => {
        if (inputCommand.trim() !== '') {
            sendCommand(inputCommand.trim());
            setInputCommand('');
        }
    };

    return (
        <div style={{ textAlign: "center", marginTop: "50px" }}>
            <h1>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –†–æ–±–æ—Ç–æ–º</h1>
            <button onClick={() => sendCommand('forward')}>–í–ø–µ—Ä–µ–¥</button>
            <br /><br />
            <button onClick={() => sendCommand('left')}>–í–ª—ñ–≤–æ</button>
            <button onClick={() => sendCommand('stop')}>–°—Ç–æ–ø</button>
            <button onClick={() => sendCommand('right')}>–í–ø—Ä–∞–≤–æ</button>
            <br /><br />
            <button onClick={() => sendCommand('backward')}>–ù–∞–∑–∞–¥</button>

            <h2>–†—É—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:</h2>
            <input type="text" value={inputCommand}
                   onChange={(e) => setInputCommand(e.target.value)}
                   placeholder="–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É..." />
            <button onClick={handleSendCustom}>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏</button>

            <h2>–ü–æ–∫–∞–∑–Ω–∏–∫–∏ —Å–µ–Ω—Å–æ—Ä—ñ–≤</h2>
            <div>
                <p>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {sensorData.temperature !== "-" ? `${sensorData.temperature.toFixed(1)} ¬∞C` : "-"}</p>
                <p>üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {sensorData.humidity !== "-" ? `${sensorData.humidity.toFixed(1)} %` : "-"}</p>
                <p>üèîÔ∏è –¢–∏—Å–∫: {sensorData.pressure !== "-" ? `${sensorData.pressure.toFixed(1)} hPa` : "-"}</p>
                <p>üí° –û—Å–≤—ñ—Ç–ª–µ–Ω—ñ—Å—Ç—å: {sensorData.light}</p>
                <p>üîä –ó–≤—É–∫: {sensorData.sound}</p>
                <p>üõ¢Ô∏è CO (MQ-7): {sensorData.co}</p>
            </div>

            <p style={{ marginTop: "10px", color: connected ? "green" : "red" }}>
                {connected ? `üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ, –æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${lastUpdate}` : "üî¥ –ù–µ–º–∞—î –∑–≤'—è–∑–∫—É –∑ –ø—Ä–∏—Å—Ç—Ä–æ—î–º"}
            </p>
        </div>
    );
}

export default App;
